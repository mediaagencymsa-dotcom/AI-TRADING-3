# -*- coding: utf-8 -*-
"""
ü§ñ AI Trading Bot ‚Äì Steg 1 F√∂rb√§ttrad Basversion
Alpaca + RSI/Volym + Bollinger + Telegram + S√§ker orderhantering
"""
<<<<<<< HEAD
from dotenv import load_dotenv
=======

>>>>>>> b65d31f (F√∂rsta commit med hela projektet)
import os
import time
import warnings
import logging
from datetime import datetime
from typing import List, Dict, Optional

import pandas as pd
import yfinance as yf
from ta.momentum import RSIIndicator
import requests
import alpaca_trade_api as tradeapi

<<<<<<< HEAD
# Ladda milj√∂variabler
load_dotenv()

=======
>>>>>>> b65d31f (F√∂rsta commit med hela projektet)
# Logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('trading_bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)
warnings.filterwarnings("ignore")

# -------------------- Konfiguration --------------------
class TradingBotConfig:
    def __init__(self):
<<<<<<< HEAD
        # üîí OBLIGATORISKA API-nycklar (m√•ste finnas i .env)
        self.ALPACA_API_KEY = self.get_env_var('ALPACA_API_KEY')
        self.ALPACA_API_SECRET = self.get_env_var('ALPACA_API_SECRET')
        
        # üì° VALFRIA konfigurationer (har standardv√§rden)
        self.ALPACA_BASE_URL = os.getenv('ALPACA_BASE_URL', 'https://paper-api.alpaca.markets')

        # üì± Telegram (VALFRITT - fungerar utan)
        self.TELEGRAM_BOT_TOKEN: Optional[str] = os.getenv('TELEGRAM_BOT_TOKEN')
        self.TELEGRAM_CHAT_ID: Optional[str] = os.getenv('TELEGRAM_CHAT_ID')
=======
        # üîí S√§kra API-nycklar
        self.ALPACA_API_KEY = self.get_env_var('ALPACA_API_KEY')
        self.ALPACA_API_SECRET = self.get_env_var('ALPACA_API_SECRET')
        self.ALPACA_BASE_URL = os.getenv('ALPACA_BASE_URL', 'https://paper-api.alpaca.markets')

        # Telegram (valfritt)
        self.TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        self.TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
>>>>>>> b65d31f (F√∂rsta commit med hela projektet)

        # Trading parametrar
        self.MIN_VOLUME = int(os.getenv('MIN_VOLUME', 1000))
        self.RSI_OVERSOLD = float(os.getenv('RSI_OVERSOLD', 30))
        self.RSI_OVERBOUGHT = float(os.getenv('RSI_OVERBOUGHT', 70))
        self.MIN_VOLUME_SPIKE = float(os.getenv('MIN_VOLUME_SPIKE', 50))  # Volym√∂kning kr√§vs
        self.API_DELAY = float(os.getenv('API_DELAY', 0.5))
        self.MAX_RETRIES = int(os.getenv('MAX_RETRIES', 3))
        
        # üõ°Ô∏è Riskkontroller
        self.POSITION_SIZE_PCT = float(os.getenv('POSITION_SIZE_PCT', 0.02))  # 2% per trade
        self.MAX_POSITION_VALUE = float(os.getenv('MAX_POSITION_VALUE', 1000))  # Max $1000 per position
        self.STOP_LOSS_PCT = float(os.getenv('STOP_LOSS_PCT', 0.04))  # 4% stop loss
        self.TAKE_PROFIT_PCT = float(os.getenv('TAKE_PROFIT_PCT', 0.05))  # 5% take profit
        self.MAX_DAILY_LOSS = float(os.getenv('MAX_DAILY_LOSS', 100))  # Max $100 f√∂rlust/dag
        
        # S√§kerhet
        self.DRY_RUN = os.getenv('DRY_RUN', 'true').lower() == 'true'  # Simulering som standard
        
        logger.info("‚úÖ Konfiguration laddad")
        if self.DRY_RUN:
            logger.warning("‚ö†Ô∏è DRY RUN MODE - Inga riktiga order skickas!")
<<<<<<< HEAD
        
        # Validera konfiguration
        self._validate_config()
    
    def _validate_config(self):
        """Kontrollera att konfigurationen √§r giltig"""
        # Kontrollera Telegram-konfiguration
        if self.TELEGRAM_BOT_TOKEN and not self.TELEGRAM_CHAT_ID:
            logger.warning("‚ö†Ô∏è TELEGRAM_BOT_TOKEN finns men TELEGRAM_CHAT_ID saknas")
        elif self.TELEGRAM_CHAT_ID and not self.TELEGRAM_BOT_TOKEN:
            logger.warning("‚ö†Ô∏è TELEGRAM_CHAT_ID finns men TELEGRAM_BOT_TOKEN saknas")
        elif self.TELEGRAM_BOT_TOKEN and self.TELEGRAM_CHAT_ID:
            logger.info("üì± Telegram-konfiguration hittad")
        
        # Kontrollera att nycklar har r√§tt l√§ngd (ungef√§r)
        if len(self.ALPACA_API_KEY.strip()) < 15:
            logger.warning("‚ö†Ô∏è ALPACA_API_KEY verkar f√∂r kort")
        if len(self.ALPACA_API_SECRET.strip()) < 30:
            logger.warning("‚ö†Ô∏è ALPACA_API_SECRET verkar f√∂r kort")

    def get_env_var(self, key: str) -> str:
        """F√∂rb√§ttrad milj√∂variabel-hantering - OBLIGATORISKA v√§rden"""
        value = os.getenv(key)
        if not value or value.strip() == '':
            logger.error(f"‚ùå OBLIGATORISK milj√∂variabel '{key}' saknas eller tom!")
            logger.error(f"üí° L√§gg till '{key}=ditt_v√§rde' i .env filen")
            raise ValueError(f"Milj√∂variabeln '{key}' saknas!")
        return value.strip()  # Ta bort eventuella mellanslag
=======

    def get_env_var(self, key: str) -> str:
        """F√∂rb√§ttrad milj√∂variabel-hantering"""
        value = os.getenv(key)
        if not value:
            logger.error(f"‚ùå Milj√∂variabeln '{key}' saknas!")
            raise ValueError(f"Milj√∂variabeln '{key}' saknas!")
        return value
>>>>>>> b65d31f (F√∂rsta commit med hela projektet)

    def validate_telegram(self) -> bool:
        return bool(self.TELEGRAM_BOT_TOKEN and self.TELEGRAM_CHAT_ID)


# -------------------- Trading Bot --------------------
class TradingBot:
    def __init__(self, config: TradingBotConfig):
        self.config = config
        self.api = None
        self.results = []
        self.daily_pnl = 0.0  # Track daily P&L
        
        self._initialize_alpaca_api()

    def _initialize_alpaca_api(self):
        try:
            self.api = tradeapi.REST(
                self.config.ALPACA_API_KEY,
                self.config.ALPACA_API_SECRET,
                base_url=self.config.ALPACA_BASE_URL
            )
            account = self.api.get_account()
            logger.info(f"‚úÖ Alpaca API ansluten - Konto: {account.status}")
            logger.info(f"üí∞ Tillg√§ngligt kapital: ${float(account.cash):,.2f}")
<<<<<<< HEAD
        except tradeapi.rest.APIError as e:
            if "unauthorized" in str(e).lower():
                logger.error("‚ùå ALPACA UNAUTHORIZED - Kontrollera dina API-nycklar i .env filen!")
                logger.error("üí° Se till att ALPACA_API_KEY och ALPACA_API_SECRET √§r korrekta")
                raise ConnectionError("Felaktiga Alpaca API-nycklar")
            else:
                logger.error(f"‚ùå Alpaca API-fel: {e}")
                raise ConnectionError(f"Kunde inte ansluta till Alpaca API: {e}")
        except Exception as e:
            logger.error(f"‚ùå Ov√§ntat Alpaca-fel: {e}")
=======
        except Exception as e:
            logger.error(f"‚ùå Alpaca API-fel: {e}")
>>>>>>> b65d31f (F√∂rsta commit med hela projektet)
            raise ConnectionError(f"Kunde inte ansluta till Alpaca API: {e}")

    # ---------- Tickers ----------
    def get_tickers(self, limit: int = 50) -> List[str]:
        try:
            assets = self.api.list_assets(status="active")
            # Filtrera f√∂r stora, likvida aktier
            filtered = [
                a.symbol for a in assets 
                if a.tradable and 
                   a.exchange in ['NASDAQ', 'NYSE'] and
                   a.status == 'active' and
                   not a.symbol.startswith('$')  # Undvik specialsymboler
            ]
            logger.info(f"üìä H√§mtade {len(filtered[:limit])} aktier att analysera")
            return filtered[:limit]
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Fallback p√• popul√§ra aktier: {e}")
            return ['AAPL', 'MSFT', 'AMZN', 'GOOGL', 'TSLA', 'META', 'NVDA', 'AMD']

    # ---------- Telegram ----------
    def send_telegram(self, message: str) -> bool:
        if not self.config.validate_telegram():
            return False
        
        url = f"https://api.telegram.org/bot{self.config.TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": self.config.TELEGRAM_CHAT_ID, 
            "text": message, 
            "parse_mode": "HTML"
        }
        
        for attempt in range(self.config.MAX_RETRIES):
            try:
                r = requests.post(url, json=payload, timeout=10)
                r.raise_for_status()
                logger.info("üì© Telegram skickat")
                return True
            except requests.RequestException as e:
                logger.warning(f"‚ö†Ô∏è Telegram-fel f√∂rs√∂k {attempt+1}: {e}")
                if attempt < self.config.MAX_RETRIES - 1:
                    time.sleep(2 ** attempt)
        
        logger.error("‚ùå Telegram misslyckades")
        return False

    # ---------- Marknadsdata ----------
    def fetch_data(self, ticker: str) -> Optional[pd.DataFrame]:
        try:
            df = yf.download(ticker, period="3mo", interval="1d", progress=False, auto_adjust=True)
            
            # Grundl√§ggande validering
            if df.empty:
                return None
            
            # Hantera MultiIndex kolumner
            if isinstance(df.columns, pd.MultiIndex):
                df.columns = [col[0] for col in df.columns]
            
            # Kontrollera att n√∂dv√§ndiga kolumner finns
            required_columns = ['Close', 'Volume', 'High', 'Low', 'Open']
            missing_columns = [col for col in required_columns if col not in df.columns]
            if missing_columns:
                logger.debug(f"‚ùå {ticker}: Saknar kolumner {missing_columns}")
                return None
            
            # Datakvalitet kontroller - separata if-statements f√∂r klarhet
            if df['Close'].isna().all():
                logger.debug(f"‚ùå {ticker}: Alla st√§ngningspriser √§r NaN")
                return None
                
            if (df['Volume'] < 0).any():
                logger.debug(f"‚ùå {ticker}: Negativ volym hittad")
                return None
                
            if len(df) < 20:  # Beh√∂ver minst 20 dagars data f√∂r RSI
                logger.debug(f"‚ùå {ticker}: Otillr√§cklig data ({len(df)} dagar)")
                return None
            
            # Kontrollera f√∂r extrema v√§rden som kan vara felaktiga
            if (df['Close'] <= 0).any():
                logger.debug(f"‚ùå {ticker}: Negativa eller noll-priser")
                return None
                
            if (df['Close'] > 100000).any():  # Priser √∂ver $100k √§r suspekta
                logger.debug(f"‚ùå {ticker}: Extremt h√∂ga priser")
                return None
            
            return df
            
        except Exception as e:
            logger.debug(f"‚ùå Datafel {ticker}: {e}")
            return None

    # ---------- Indikatorer ----------
    def add_indicators(self, df: pd.DataFrame) -> pd.DataFrame:
        try:
            # RSI
            rsi = RSIIndicator(close=df['Close'], window=14)
            df['RSI'] = rsi.rsi()
            
            # Volymgenomsnitt
            df['vol_avg_10'] = df['Volume'].rolling(10).mean()
            df['vol_avg_20'] = df['Volume'].rolling(20).mean()
            
            # Bollinger Bands
            df['price_sma_20'] = df['Close'].rolling(20).mean()
            df['price_std_20'] = df['Close'].rolling(20).std()
            df['bb_upper'] = df['price_sma_20'] + 2*df['price_std_20']
            df['bb_lower'] = df['price_sma_20'] - 2*df['price_std_20']
            
            # Prisf√∂r√§ndringar
            df['price_change_1d'] = df['Close'].pct_change()
            
            return df.dropna()
            
        except Exception as e:
            logger.error(f"‚ùå Indikatorfel: {e}")
            return pd.DataFrame()

    # ---------- F√∂rb√§ttrad Signal ----------
    def generate_signal(self, latest: pd.Series, ticker: str) -> str:
        try:
            rsi = latest['RSI']
            volume = latest['Volume']
            vol_avg_10 = latest['vol_avg_10']
            vol_avg_20 = latest['vol_avg_20']
            price = latest['Close']
            bb_lower = latest['bb_lower']
            bb_upper = latest['bb_upper']
            
            # Grundl√§ggande filter
            if volume < self.config.MIN_VOLUME:
                return "‚ùå L√•g volym"
            
            # Volymspike kr√§vs f√∂r signaler
            vol_spike_10 = ((volume - vol_avg_10) / vol_avg_10) * 100 if vol_avg_10 > 0 else 0
            vol_spike_20 = ((volume - vol_avg_20) / vol_avg_20) * 100 if vol_avg_20 > 0 else 0
            
            if vol_spike_10 < self.config.MIN_VOLUME_SPIKE:
                return "‚ùå Ingen volymspike"
            
            # STARK K√ñPSIGNAL
            if (rsi < self.config.RSI_OVERSOLD and 
                vol_spike_10 > self.config.MIN_VOLUME_SPIKE and
                vol_spike_20 > 25 and  # √Ñven h√∂gre √§n 20-dagars genomsnitt
                price <= bb_lower * 1.02):  # N√§ra nedre Bollinger Band
                return "‚úÖ STARK K√ñP"
            
            # STARK S√ÑLJSIGNAL  
            elif (rsi > self.config.RSI_OVERBOUGHT and
                  vol_spike_10 > self.config.MIN_VOLUME_SPIKE and
                  price >= bb_upper * 0.98):  # N√§ra √∂vre Bollinger Band
                return "‚ö†Ô∏è STARK S√ÑLJ"
            
            return "‚ùå Ingen signal"
            
        except Exception as e:
            logger.error(f"‚ùå Signalfel f√∂r {ticker}: {e}")
            return "‚ùå Fel vid signalber√§kning"

    # ---------- S√§ker Orderhantering ----------
    def check_risk_limits(self) -> bool:
        """Kontrollera risklimiter innan order"""
        try:
            account = self.api.get_account()
            
            # Kontrollera daglig f√∂rlust
            daily_pnl = float(account.unrealized_pl) + float(account.realized_pl)
            if daily_pnl < -self.config.MAX_DAILY_LOSS:
                logger.warning(f"üö® Daglig f√∂rlustgr√§ns n√•dd: ${daily_pnl:.2f}")
                return False
            
            # Kontrollera kontostatus
            if account.trading_blocked:
                logger.warning("üö® Trading blockerat p√• kontot")
                return False
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Fel vid riskkontroll: {e}")
            return False

    def calculate_position_size(self, ticker: str, price: float) -> int:
        """Ber√§kna s√§ker positionsstorlek"""
        try:
            account = self.api.get_account()
            cash = float(account.cash)
            
            # Ber√§kna storlek baserat p√• procent av kapital
            size_by_percent = (cash * self.config.POSITION_SIZE_PCT) / price
            
            # Begr√§nsa till max position value
            size_by_max_value = self.config.MAX_POSITION_VALUE / price
            
            # Ta det mindre av de tv√•
            position_size = min(size_by_percent, size_by_max_value)
            
            # Minst 1 aktie
            return max(1, int(position_size))
            
        except Exception as e:
            logger.error(f"‚ùå Fel vid positionsstorlek-ber√§kning: {e}")
            return 1

    def place_order(self, ticker: str, signal: str, latest_data: pd.Series):
        """S√§ker orderhantering med riskkontroller"""
        
        # Riskkontroll
        if not self.check_risk_limits():
            logger.warning(f"üö® Risklimiter √∂vertr√§dda - ingen order f√∂r {ticker}")
            return False
        
        try:
            current_price = float(latest_data['Close'])
            
            if signal == "‚úÖ STARK K√ñP":
                qty = self.calculate_position_size(ticker, current_price)
                
                # Dry run kontroll
                if self.config.DRY_RUN:
                    logger.info(f"üé≠ [DRY RUN] Skulle k√∂pa {qty} av {ticker} @ ${current_price:.2f}")
                    return True
                
                # Skicka riktig order
                order = self.api.submit_order(
                    symbol=ticker,
                    qty=qty,
                    side='buy',
                    type='market',
                    time_in_force='gtc'
                )
                
                logger.info(f"üü¢ K√∂porder skickad: {ticker} qty {qty} @ ~${current_price:.2f}")
                
                # Skicka Telegram-notis
                message = f"üü¢ <b>K√ñP ORDER</b>\n{ticker} x {qty}\nPris: ~${current_price:.2f}\nV√§rde: ~${qty * current_price:.2f}"
                self.send_telegram(message)
                
                return True
                
            elif signal == "‚ö†Ô∏è STARK S√ÑLJ":
                # Kontrollera om vi √§ger aktien
                try:
                    position = self.api.get_position(ticker)
                    qty = int(position.qty)
                    
                    if qty <= 0:
                        logger.debug(f"Ingen position i {ticker} att s√§lja")
                        return False
                    
                    # Dry run kontroll
                    if self.config.DRY_RUN:
                        logger.info(f"üé≠ [DRY RUN] Skulle s√§lja {qty} av {ticker} @ ${current_price:.2f}")
                        return True
                    
                    # Skicka s√§ljorder
                    order = self.api.submit_order(
                        symbol=ticker,
                        qty=qty,
                        side='sell',
                        type='market',
                        time_in_force='gtc'
                    )
                    
                    logger.info(f"üî¥ S√§ljorder skickad: {ticker} qty {qty} @ ~${current_price:.2f}")
                    
                    # Skicka Telegram-notis
                    message = f"üî¥ <b>S√ÑLJ ORDER</b>\n{ticker} x {qty}\nPris: ~${current_price:.2f}\nV√§rde: ~${qty * current_price:.2f}"
                    self.send_telegram(message)
                    
                    return True
                    
                except Exception:
                    logger.debug(f"Ingen position i {ticker}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Orderfel {ticker}: {e}")
            return False

    # ---------- Huvudanalys ----------
    def analyze_tickers(self):
        """Huvudanalys-loop"""
        logger.info("üöÄ Startar trading bot analys...")
        
        tickers = self.get_tickers()
        signals_found = 0
        orders_placed = 0
        
        for i, ticker in enumerate(tickers, 1):
            logger.debug(f"Analyserar {ticker} ({i}/{len(tickers)})")
            
            # H√§mta data
            df = self.fetch_data(ticker)
            if df is None:
                continue
            
            # L√§gg till indikatorer
            df = self.add_indicators(df)
            if df.empty or len(df) < 20:
                continue
            
            # Generera signal
            latest = df.iloc[-1]
            signal = self.generate_signal(latest, ticker)
            
            # Agera p√• signaler
            if signal not in ["‚ùå Ingen signal", "‚ùå L√•g volym", "‚ùå Ingen volymspike", "‚ùå Fel vid signalber√§kning"]:
                signals_found += 1
                
                logger.info(f"üéØ {signal} f√∂r {ticker} | RSI: {latest['RSI']:.1f} | Pris: ${latest['Close']:.2f}")
                
                # F√∂rs√∂k placera order
                if self.place_order(ticker, signal, latest):
                    orders_placed += 1
                
                # Skicka grundl√§ggande Telegram-notis
                vol_change = ((latest['Volume'] - latest['vol_avg_10']) / latest['vol_avg_10']) * 100
                telegram_msg = (f"{signal} f√∂r <b>{ticker}</b>\n"
                               f"RSI: {latest['RSI']:.1f}\n"
                               f"Pris: ${latest['Close']:.2f}\n"
                               f"Volym√∂kning: +{vol_change:.1f}%")
                self.send_telegram(telegram_msg)
            
            # Rate limiting
            time.sleep(self.config.API_DELAY)
        
        # Sammanfattning
        logger.info("="*60)
        logger.info(f"üéØ Analys slutf√∂rd!")
        logger.info(f"üìä Analyserade aktier: {len(tickers)}")
        logger.info(f"üö® Signaler hittade: {signals_found}")
        logger.info(f"üìà Order placerade: {orders_placed}")
        logger.info("="*60)
        
        # Skicka sammanfattning till Telegram
        summary = (f"üìä <b>ANALYS SLUTF√ñRD</b>\n"
                  f"Aktier: {len(tickers)}\n"
                  f"Signaler: {signals_found}\n"
                  f"Order: {orders_placed}")
        self.send_telegram(summary)


<<<<<<< HEAD
# -------------------- Test Functions --------------------
def test_connections():
    """Testa API-anslutningar innan huvudk√∂rning"""
    logger.info("üîß Testar anslutningar...")
    
    config = TradingBotConfig()
    
    # Test Alpaca anslutning
    try:
        api = tradeapi.REST(
            config.ALPACA_API_KEY, 
            config.ALPACA_API_SECRET, 
            config.ALPACA_BASE_URL,
            api_version='v2'
        )
        account = api.get_account()
        logger.info(f"‚úÖ Alpaca ansluten! Kontostatus: {account.status}")
        logger.info(f"üí∞ Kontosaldo: ${float(account.cash):,.2f}")
        logger.info(f"üìä K√∂pkraft: ${float(account.buying_power):,.2f}")
    except Exception as e:
        logger.error(f"‚ùå Alpaca-anslutning misslyckades: {e}")
        return False
    
    # Test Telegram anslutning (om konfigurerat)
    if config.validate_telegram():
        try:
            test_message = "ü§ñ Trading Bot: Anslutningstest lyckades!"
            response = requests.post(
                f"https://api.telegram.org/bot{config.TELEGRAM_BOT_TOKEN}/sendMessage",
                json={"chat_id": config.TELEGRAM_CHAT_ID, "text": test_message},
                timeout=10
            )
            if response.status_code == 200:
                logger.info("‚úÖ Telegram fungerar! Testmeddelande skickat.")
            else:
                logger.warning(f"‚ö†Ô∏è Telegram-problem: {response.status_code} - {response.text}")
        except Exception as e:
            logger.error(f"‚ùå Telegram-test misslyckades: {e}")
            logger.info("‚ÑπÔ∏è Boten fungerar utan Telegram, men notifikationer skickas inte")
    else:
        logger.info("‚ÑπÔ∏è Telegram inte konfigurerat - notifikationer inaktiverade")
    
    logger.info("‚úÖ Anslutningstester slutf√∂rda!")
    return True


=======
>>>>>>> b65d31f (F√∂rsta commit med hela projektet)
# -------------------- Main --------------------
def main():
    try:
        logger.info("ü§ñ AI Trading Bot startar...")
        
        config = TradingBotConfig()
        bot = TradingBot(config)
        bot.analyze_tickers()
        
        logger.info("üéâ Trading bot slutf√∂rd framg√•ngsrikt!")
        
    except ValueError as e:
        logger.error(f"‚ùå Konfigurationsfel: {e}")
        print("\nüîß KONFIGURATIONSHJ√ÑLP:")
        print("S√§tt milj√∂variabler:")
        print("export ALPACA_API_KEY='din_api_nyckel'")
        print("export ALPACA_API_SECRET='din_secret_nyckel'")
        print("export DRY_RUN='false'  # F√∂r riktiga order")
        
    except Exception as e:
        logger.error(f"‚ùå Ov√§ntat fel: {e}")
        raise

<<<<<<< HEAD

if __name__ == "__main__":
    # K√∂r anslutningstester f√∂rst
    if not test_connections():
        logger.error("‚ùå Anslutningstester misslyckades - avslutar")
        exit(1)
    
    # K√∂r huvudprogrammet om testerna lyckas
=======
if __name__ == "__main__":
>>>>>>> b65d31f (F√∂rsta commit med hela projektet)
    main()
